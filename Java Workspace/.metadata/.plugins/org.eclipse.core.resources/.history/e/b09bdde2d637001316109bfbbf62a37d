package Tweetmodelextractor;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import twitter4j.*;
import twitter4j.auth.AccessToken;
import twitter4j.conf.ConfigurationBuilder;
import uk.ac.shef.wit.simmetrics.similaritymetrics.CosineSimilarity;


import com.csvreader.CsvReader;



public class modelextractor {
	
	

	
	private static ConfigurationBuilder configBuilder;
	private final static String CONSUMER_KEY = "LnGrwVvqBr0LxnHc5OsMRA";
    private final static String CONSUMER_KEY_SECRET =     "hn4CDER2MErFY94ZvgVAWHpAriuJTnXvQyxR6gzXCJ8";
	

	
	static String[] event2files = {"F://tweetdata/supercup.csv"} ;
	
	
	static HashMap<String,Integer> ids= new HashMap<String,Integer>();
	static CsvReader products;
	static String tweetScreenName;
	static HashMap<String,String> stopwordshm = new HashMap<String,String>();
public static void main(String[] args) {
	CosineSimilarity  cs = new CosineSimilarity();
	System.out.println(cs.getSimilarity("Banane schmeckt super und ist toll", "Banane ist ganz gut aber schmeckt toll"));
	//startReading(); 
		//checkTwitter();
	}

public static void checkTwitter()
{
	
	configBuilder = new ConfigurationBuilder();
    configBuilder.setDebugEnabled(true);        
    configBuilder.setOAuthConsumerKey("LnGrwVvqBr0LxnHc5OsMRA");
    configBuilder.setOAuthConsumerSecret("hn4CDER2MErFY94ZvgVAWHpAriuJTnXvQyxR6gzXCJ8");
    configBuilder.setOAuthAccessToken("26801165-5i0EGcmO1uu64q8RQzVROfgM2VmIhJOVkIR5CI6JV");
    configBuilder.setOAuthAccessTokenSecret("JxGX8D64myzHFM7K5YufwYucK6EEcc6kKbVranA0F4");
    
	
	 try {
        
		 
	
         Twitter twitter = new TwitterFactory(configBuilder.build()).getInstance();
    	 /*User user = twitter.showUser("Dan_Miller");
    
         System.out.println("Showing @" + user.getDescription() + "'s home timeline.");*/
      
         int idCount = 0;
 		ArrayList<TweetModel> alltweets= new ArrayList<TweetModel>();
 		for (int t=0; t<event2files.length; t++)
 		{
 		
 		try {
 		
 			products = new CsvReader(event2files[t],'\t');
 		
 			products.readHeaders();
 		for ( int i = 0; i<products.getHeaders().length;i++)
 			{
 			//System.out.println(products.getHeaders()[i]);
 			}
 			
 	
 			
 		BufferedWriter writer = null;
 		try
 		{
 		    writer = new BufferedWriter( new FileWriter("F://users.txt"));
 		   
 		  
 		}
 		catch ( IOException e)
 		{
 		}
 				while (products.readRecord())
 				{
 					
 					//Tweetdetails
 					String creationDate = products.get("TWEET_CREATIONDATE");
 					String tweetContent = products.get("TWEET_CONTENT");
 					String tweetreplytostatus = products.get("TWEET_REPLYTOSTATUS");
 					String tweetreplytousername = products.get("TWEET_REPLYTOUSERNAME");
 					String tweetreplytouserid = products.get("TWEET_REPLYTOUSERID");
 					String tweetplace = products.get("TWEET_PLACE");
 					String tweetfavourited = products.get("TWEET_FAVORITED");
 					
 				
 					
 					
 					tweetContent = tweetContent.replace("\\", "\\\\"); 
 					tweetContent = tweetContent.replace("'", " "); 
 					String keywordtemp = tweetContent;
 					String tweetUser = products.get("USER_NAME");
 					tweetUser = tweetUser.replace("'", " "); 
 					tweetScreenName = products.get("USER_SCREENNAME");
 					String coordinates = products.get("TWEET_COORDS");
 					
 					
 					
 					
 					
 					
 					// Userdetails
 					String Userstatusescount = products.get("USER_STATUSESCOUNT");
 					String UserFollowers = products.get("USER_FOLLOWERSCOUNT");
 					String UserLocation = products.get("USER_LOCATION");
 					String UserFriendscount = products.get("USER_FRIENDSCOUNT");
 					String UserCreationDate = products.get("USER_CREATIONDATE");
 					String UserDescription = products.get("USER_DESCRIPTION");
 					String UserListedCount = products.get("USER_LISTEDCOUNT");
 					String tweetID = products.get("TWEET_ID");
 					String language = products.get("USER_LANGUAGE");
 					
 					
 					UserModel tempmodel= new UserModel();
 					if( coordinates==null || coordinates.contains("null") || coordinates=="" || coordinates.split(",").length<2)
 					{
 				
 					continue;

 					}
 					if(!ids.containsKey(tweetID))
 					{
 						
 						 User user = twitter.showUser(tweetScreenName.replace(" ", "_"));
 						 tempmodel = new UserModel(user.getCreatedAt(),user.getDescription(),user.getLang(),user.getListedCount(),user.getProfileImageURL(),user.isVerified(),user.isProtected(),user.getName(),user.getURL(),user.getId());
 						
 						
 					
 				
 					try
 					{
 						if(tempmodel.id==0)
 					    writer.append("INSERT INTO users (creationDate,description,language,userName,userURL,listedCount,isProtected,isVerified,profileImage,userID,userCreationdate) VALUES  ("+"\'"+tempmodel.creationDate +"\'"+","+"\'"+tempmodel.Description+"\'"+","+"\'"+tempmodel.language+"\'"+","+"\'"+tempmodel.userName+"\'"+","+"\'"+tempmodel.userURL+"\'" +","+tempmodel.listedCount +","+tempmodel.isProtected +"," + tempmodel.isVerified  +","+"\'"+ tempmodel.profileimage+"\'"  + ","+ tempmodel.id +");\n");

 					}
 					catch ( IOException e)
 					{
 					}
 					}
 					ids.put(tweetID,0);
 					
 					
 					
 					
 					
 					
 					
 				
 				}
 				
 		
 			    try
 			    {
 			        if ( writer != null)
 			        writer.close( );
 			    }
 			    catch ( IOException e)
 			    {
 			    }
 			products.close();
 			
 		} catch (FileNotFoundException e) {
 			e.printStackTrace();
 		} catch (IOException e) {
 			e.printStackTrace();
 		}
 	
 	}
 		System.out.println(idCount);
 	
         
         
         
         
         
         
     } catch (TwitterException te) {
         te.printStackTrace();
         System.out.println("Failed to get timeline: " + te.getMessage());
         System.out.println(tweetScreenName);
         products.close();
         //WriteXMLFile.writeXML(alltweets);
        // System.exit(-1);
     }
}
	
	
	public static void startReading ()
	{
		int idCount = 0;
		ArrayList<TweetModel> alltweets= new ArrayList<TweetModel>();
		 SentimentClassifier sentClassifier; 		
		   sentClassifier = new SentimentClassifier(); 
		for (int t=0; t<event2files.length; t++)
		{
		
		try {
		
			CsvReader products = new CsvReader(event2files[t],'\t');
		
			products.readHeaders();
		for ( int i = 0; i<products.getHeaders().length;i++)
			{
			//System.out.println(products.getHeaders()[i]);
			}
			
		try
			{
			BufferedReader textIn = new BufferedReader(new FileReader("F://stopwords.txt"));
	        String curLine = null;
	       
	  
	        while ((curLine = textIn.readLine()) != null) {
	            curLine = curLine.trim();
	         stopwordshm.put(curLine, curLine);
	         
	        }

			}
			catch (Exception e)
			{
			
			}
			
		BufferedWriter writer = null;
		try
		{
		    writer = new BufferedWriter( new FileWriter("F://tweets4.txt"));
		   
		    		

		}
		catch ( IOException e)
		{
		}
				while (products.readRecord())
				{
					//Tweetdetails
 					String creationDate = products.get("TWEET_CREATIONDATE");
 					String tweetContent = products.get("TWEET_CONTENT");
 					String tweetreplytostatus = products.get("TWEET_REPLYTOSTATUS");
 					String tweetreplytousername = products.get("TWEET_REPLYTOUSERNAME");
 					String tweetreplytouserid = products.get("TWEET_REPLYTOUSERID");
 					String tweetplace = products.get("TWEET_PLACE");
 					String tweetfavourited = products.get("TWEET_FAVORITED");
 					String tweetretweetcount = products.get("TWEET_RETWEETCOUNT");
 					tweetplace = tweetplace.replace("'", " "); 
 					int sentiment = 1;
 					String sent = sentClassifier.classify(tweetContent); 
 				
 					
 					if( sent.contains("pos"))
 					{
 						sentiment = 1;
 					}
 					if( sent.contains("neg"))
 					{
 						sentiment = -1;
 						System.out.println(tweetContent);
 					}
 					if( sent.contains("neu"))
 					{
 						sentiment = 0;
 					}
 					System.out.println("Sentiment: " + sentiment);
 					tweetContent = tweetContent.replace("\\", "\\\\"); 
 					tweetContent = tweetContent.replace("'", ""); 
 					String tweetUser = products.get("USER_NAME");
 					tweetUser = tweetUser.replace("'", " "); 
 					tweetScreenName = products.get("USER_SCREENNAME");
 					String coordinates = products.get("TWEET_COORDS");
 					String keywordtemp= tweetContent;
 					
 					String[] keywordsplit = keywordtemp.split(" ");
 					
 					for ( int i=0; i< keywordsplit.length; i++)
 					{
 					if(stopwordshm.containsKey(keywordsplit[i]))
 					{
 						keywordtemp= keywordtemp.replaceAll(keywordsplit[i],"");
 						//System.out.println(keywordsplit[i]);
 					}
 					if(keywordsplit[i].contains("http") || keywordsplit[i].length()<3)
 					{
 						keywordtemp= keywordtemp.replace(keywordsplit[i],"");
 					}
 					}
 					keywordtemp= keywordtemp.replaceAll("[-+^#!?,.()@]*", "");
 					keywordtemp= keywordtemp.replaceAll("[^\\p{L}\\p{Nd}]"," ");
 				
 					
 					// Userdetails
 					String Userstatusescount = products.get("USER_STATUSESCOUNT");
 					String UserFollowers = products.get("USER_FOLLOWERSCOUNT");
 					String UserLocation = products.get("USER_LOCATION");
 					String UserFriendscount = products.get("USER_FRIENDSCOUNT");
 					String UserCreationDate = products.get("USER_CREATIONDATE");
 					String UserDescription = products.get("USER_DESCRIPTION");
 					String UserListedCount = products.get("USER_LISTEDCOUNT");
 					String tweetID = products.get("TWEET_ID");
 					String language = products.get("USER_LANGUAGE");
					
					if( coordinates==null || coordinates.contains("null") || coordinates=="" || coordinates.split(",").length<2)
					{
				
					continue;

					}
					if(!ids.containsKey(tweetID))
					{
					TweetModel tempmodel = new TweetModel(keywordtemp,creationDate,coordinates,tweetContent,tweetUser,
							tweetScreenName,UserFollowers,UserFriendscount,Userstatusescount,language,tweetID,tweetplace,tweetretweetcount,tweetreplytostatus,tweetreplytousername,UserDescription,UserCreationDate,UserListedCount);
					
				
					try
					{
					    writer.append("INSERT IGNORE INTO tweets (creationDate,tweetContent,tweetUser,tweetScreenName,latitude,longitude,userStatusCount,userFollowers,userFriendscount,tweetID,language,place,retweetcount,replytostatus,replytousername,containsUrl,authordescription,userlistedcount,userCreationdate,keywords,sentiment,datasetID) VALUES  ("+"\'"+tempmodel.date +"\'"+","+"\'"+tempmodel.Content+"\'"+","+"\'"+tempmodel.Author+"\'"+","+"\'"+tempmodel.screenname+"\'"+","+tempmodel.latitude +","+tempmodel.longitude +","+ "\'"+tempmodel.userstatscount +"\'"+"," + tempmodel.followers +","+ tempmodel.friendscount + ","+ tempmodel.id + ","+"\'"+tempmodel.lang+ "\'"+","+"\'"+tempmodel.tweetplace+ "\'"+","+tempmodel.tweetretweetcount+","+tempmodel.tweetreplytostatus+","+"\'"+tempmodel.tweetreplytousername+ "\'"+","+tempmodel.containsurl+","+tempmodel.authordescription+","+"\'"+tempmodel.listedcount+ "\'"+","+"\'"+tempmodel.userdate+ "\'"+","+"\'"+tempmodel.keywords+ "\'"+","+"\'"+sentiment+ "\',2);\n");

					}
					catch ( IOException e)
					{
					}
					}
					ids.put(tweetID,0);
					
					
					
					
					
					
					
				
				}
				
		
			    try
			    {
			        if ( writer != null)
			        writer.close( );
			    }
			    catch ( IOException e)
			    {
			    }
			products.close();
			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	
	}
		
	System.out.println(idCount);
	}
	

	
		   




}
